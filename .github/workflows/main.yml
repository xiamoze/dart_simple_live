跳至内容
导航菜单
逍遥
dart_simple_live

输入/搜索
代码
拉取请求
5
行动
安全
洞察
应用程序构建操作开发
合并分支 'pr/Otiosum-coder/761' #92
工作
运行详细信息
本次运行的工作流文件
.github/workflows/publish_app_dev.yaml 在 fd821db
名称：app-build-action-dev

在：
  工作流程调度：
  推：
    分支机构：
      - ‘开发’

工作：
  #预留Android、iOS、Mac
  构建-mac-ios-android：
    运行于：macos-latest

    权限：
      内容：写

    步骤：
      #签出代码
      -用途：actions/checkout@v4
        和：
          参考：dev

      # APK签名设置
      -名称：下载 Android 密钥库
        id：android_keystore
        用途：timheuer/base64-to-file@v1.2
        和：
          文件名：keystore.jks
          编码字符串：${{ secrets.KEYSTORE_BASE64 }}
      - name：创建 key.properties
        运行：|
          echo“storeFile = $ {{steps.android_keystore.outputs.filePath}}”> simple_live_app/android/key.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> simple_live_app/android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> simple_live_app/android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> simple_live_app/android/key.properties
      #设置JAVA环境
      -用途：actions/setup-java@v4
        和：
          分布：' zulu '
          Java 版本：“ 17 ”
          缓存：“ gradle ”

      #设置Flutter
      -名称：Flutter 动作
        用途：subosito/flutter-action@v2
        和：
          flutter 版本：' 3.22.x '
          缓存：true 

      #打开MAC桌面支持
      - name：启用 Flutter 桌面
        运行：flutter config --enable-macos-desktop

      #更新Flutter的包
      -名称：恢复包
        运行：|
          cd simple_live_app
          Flutter pub 获取
      #安装appdmg npm install -g appdmg
      -名称：安装 appdmg
        运行：npm install -g appdmg

      #设置flutter_distributor环境
      -名称：安装 flutter_distributor
        运行：dart pub global activate flutter_distributor

      #压缩APK
      -名称：构建APK
        运行：|
          cd simple_live_app
          Flutter 构建 apk --release --split-per-abi
      #上传工件
      -名称：将 APK 上传到 Artifacts
        用途：actions/upload-artifact@v4
        和：
          名称：android
          路径：|
            simple_live_app/build/app/输出/flutter-apk/app-armeabi-v7a-release.apk
            simple_live_app/build/app/输出/flutter-apk/app-arm64-v8a-release.apk
            simple_live_app/build/app/输出/flutter-apk/app-x86_64-release.apk
      # TV APK签名设置
      -名称：下载 Android TV 密钥库
        id：android_tv_keystore
        用途：timheuer/base64-to-file@v1.2
        和：
          文件名：keystore_tv.jks
          编码字符串：${{ secrets.TV_KEYSTORE_BASE64 }}
      - name：创建 key.properties
        运行：|
          echo“storeFile = $ {{steps.android_tv_keystore.outputs.filePath}}”> simple_live_tv_app/android/key.properties
          echo "storePassword=${{ secrets.TV_STORE_PASSWORD }}" >> simple_live_tv_app/android/key.properties
          echo "keyPassword=${{ secrets.TV_KEY_PASSWORD }}" >> simple_live_tv_app/android/key.properties
          echo "keyAlias=${{ secrets.TV_KEY_ALIAS }}" >> simple_live_tv_app/android/key.properties
      #压缩 Android TV APK
      -名称：构建电视 APK
        运行：|
          cd simple_live_tv_app
          Flutter 构建 apk --release --split-per-abi
      #上传TV APK至Artifacts
      -名称：将电视 APK 上传至 Artifacts
        用途：actions/upload-artifact@v4
        和：
          名称：android_tv
          路径：|
            simple_live_tv_app/build/app/输出/flutter-apk/app-armeabi-v7a-release.apk
            simple_live_tv_app/build/app/输出/flutter-apk/app-arm64-v8a-release.apk
            simple_live_tv_app/build/app/输出/flutter-apk/app-x86_64-release.apk
      #备份iOS
      -名称：构建 IPA
        运行：|
          cd simple_live_app
          Flutter 构建 iOS --release --no-codesign
      #创建未签名ipa
      -名称：创建 IPA
        运行：|
          cd simple_live_app
          mkdir build/ios/iphoneos/Payload
          cp -R 构建/ios/iphoneos/Runner.app 构建/ios/iphoneos/Payload/Runner.app
          cd build/ios/iphoneos/
          zip -q -r ios_no_sign.ipa 有效载荷
          光盘 ../../..
      #上传IPA至Artifacts
      -名称：将 IPA 上传到 Artifacts
        用途：actions/upload-artifact@v4
        和：
          名称：ios
          路径：|
            simple_live_app/build/ios/iphoneos/ios_no_sign.ipa
      #压缩MAC
      -名称：构建 MacOS
        运行：|
          cd simple_live_app
          flutter_distributor 软件包 --platform macos --targets dmg,zip --skip-clean
      
      #上传MAC至Artifacts
      -名称：将 MacOS 上传至 Artifacts
        用途：actions/upload-artifact@v4
        和：
          名称：mac
          路径：|
            simple_live_app/build/dist/*/*.dmg
            simple_live_app/build/dist/*/*.zip
      #完成
      - run : echo "🍏 这项工作的状态是 ${{ job.status }}。"

  #压缩Linux
  构建Linux：
    运行于：ubuntu-22.04
    权限：
      内容：写
    步骤：
      #签出代码
      -用途：actions/checkout@v4
        和：
          参考：dev
      #设置Flutter环境
      -名称：设置 Flutter
        用途：subosito/flutter-action@v2
        和：
          flutter 版本：“ 3.22.x ”
          缓存：true
      #安装依赖
      -名称：更新 apt-get
        运行：sudo apt-get update
      -名称：安装依赖项
        运行：sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libmpv-dev mpv
      #打开Linux桌面支持
      - name：启用 Flutter 桌面
        运行：flutter config --enable-linux-desktop
      #更新Flutter的包
      -名称：恢复包
        运行：|
          cd simple_live_app
          Flutter pub 获取
      #设置flutter_distributor环境
      -名称：安装 flutter_distributor
        运行：dart pub global activate flutter_distributor
      #构建 Linux ZIP\DMG
      -名称：构建 Linux
        运行：|
          cd simple_live_app
          flutter_distributor 软件包 --platform linux --targets deb,zip --skip-clean
      #上传Linux包至Artifacts
      -名称：上传 Linux APP 到 Artifacts
        用途：actions/upload-artifact@v4
        和：
          名称：linux
          路径：|
            simple_live_app/build/dist/*/*.deb
            simple_live_app/build/dist/*/*.zip
        #完成
      - run : echo "🍏 Linux 作业的状态为 ${{ job.status }}。"

  #备份Windows
  构建窗口：
    运行于：windows-latest
    权限：
      内容：写
    步骤：
      #签出代码
      -用途：actions/checkout@v4
        和：
          参考：dev
      #设置Flutter环境
      -名称：设置 Flutter
        用途：subosito/flutter-action@v2
        和：
          flutter 版本：“ 3.22.x ”
          缓存：true
      - name：启用 Flutter 桌面
        运行：flutter config --enable-windows-desktop
      -名称：恢复包
        运行：|
          cd simple_live_app
          Flutter pub 获取
      #设置flutter_distributor环境
      -名称：安装 flutter_distributor
        运行：dart pub global activate flutter_distributor
      #构建 Windows ZIP\MSIX
      -名称：构建 Windows
        运行：|
          cd simple_live_app
          flutter_distributor 包 --platform windows --targets msix,zip --skip-clean
      #上传Windows至Artifacts
      -名称：将 Windows APP 上传到 Artifacts
        用途：actions/upload-artifact@v4
        和：
          名称：windows
          路径：|
            simple_live_app/build/dist/*/*.msix
            simple_live_app/build/dist/*/*.zip
        #完成
      - run : echo "🍏 Windows 作业的状态为 ${{ job.status }}。"
合并分支 'pr/Otiosum-coder/761' · xiaoyaocz/dart_simple_live@fd821db
